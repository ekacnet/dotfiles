" leader is a comma now
let mapleader = ','
let g:ackprg = "ag"

" C-?? mapping depending on the mode(s)
" Insert: C-O execute a command and return to insert mode

" Use pathogen to easily modify the runtime path to include all
" " plugins under the ~/.vim/bundle directory
if version >= 700
  filetype off
  call pathogen#infect()
  filetype plugin indent on
endif

syntax on

" n = normal (ie. not in command, visual, select)
" i = insert mode
" c = command mode
" v = visual mode


" TODO figure out what I want from this
" NERDTreeFind
" Useful macros I use the most
nmap \A :set formatoptions+=a<CR>:echo "autowrap enabled"<CR>
nmap \a :set formatoptions-=a<CR>:echo "autowrap disabled"<CR>
nmap \F :NERDTreeFind<CR>
" Tab indent mode 8 chars
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
" Indent mode 8 chars
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
" enable goyo + movement tzz
" zz: put current line at the center of the screen keep current column
nmap \W mt:Goyo<CR>'tzz
" No C indentation mode and 80 cols and autowrap
nmap \b :set nocin tw=80<CR>:set formatoptions+=a<CR>
nmap \c :call TmuxPaneClear()<CR>
nmap \d :ALEToggleBuffer<CR>
nmap \e :NERDTreeToggle<CR>
nmap \f :ALEFix<CR>
" Switch gitgutter on/off
nmap \g :GitGutterToggle<CR>
nmap \i vip:sort<CR>
" Invert number
nmap \l :setlocal number!<CR>:setlocal number?<CR>
" Small indentation mode
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
" Invert paste mode !
nmap \o :set paste!<CR>:set paste?<CR>
nmap \p :ProseMode<CR>
" allow to unhilight search
nmap \q :nohlsearch<CR>
" repeat the last command in the other tmux pane
nmap \r :call TmuxPaneRepeat()<CR>
nmap ùr :call TmuxPaneRepeat()<CR>
" Enable spellchecker in the current buffer
nmap \s :setlocal invspell<CR>
" set to expandtab, ts=4,sw=4,sts=4
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
"Invert the list mode in the current buffer and display the status in the command line
nmap \u :setlocal list!<CR>:setlocal list?<CR>
" Invert the wrap mode and display the status in the command line
nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>
" Close quickfix window
nmap \x :cclose<CR>
" Useful on mac, save the file and call open on the filename of the current buffer (%)
nmap \z :w<CR>:!open %<CR><CR>
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>
map <C-c> :call FormatDiff()<CR>
" Navigate more easily ALE ...
nmap <silent> ]aj :ALENext<cr>
nmap <silent> [ak :ALEPrevious<cr>

nmap <silent> ]om :call EnableMypyLinter()<CR>
nmap <silent> [om :call DisableMypyLinter()<CR>


nmap <F8> :TagbarToggle<CR>
"Map F5 but with no recursion
nnoremap <F5> :GundoToggle<CR>

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with
" line wrapping on, this can cause the cursor to actually skip a few lines on the screen because
" it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down'
" to mean the next line on the screen
nmap j gj
nmap k gk

" Marks should go to the column, not just the line. Why isn't this the default?
nnoremap ' `

" Use ctrl + e to switch buffer
nmap <C-e> :e#<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Use the space key to toggle folds
nnoremap <space> za
vnoremap <space> zf

" Super fast window movement shortcuts
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" keep current line/col when switching left to right and vice versa
nnoremap <C-w>h :silent call KeepCurrentLine('h')<CR>
nnoremap <C-w>l :silent call KeepCurrentLine('l')<CR>

" Search for the word under the cursor in the current directory + create a [m]ark named [o] so that
" we can return to the original location, nb: we need to have a ":" to enter in command mode and
" type the function name (Ack, ...)
" ! to not jump to the first result, see make command documentation
" \b: word boundary end
nmap <M-K>    mo:GGrepw! \b<cword>\b<CR>
nmap <Esc>F   mo:GGrepw! \b<cword>\b<CR>
"Prefer GGrep over Ggrep from vim-fugitive, also vim-fugitive is not dealing with \b markers
"nmap <Esc>K   :Ggrep -q "<cword>" <CR>
nmap <M-k>    mo:Sack! "\b<cword>\b"<CR>
nmap <Esc>f   mo:Sack! "\b<cword>\b"<CR>
"<C-U> remove the visual range
vmap <Esc>f   mo:<C-U>VAck!<CR>
vmap <M-k>    mo:<C-U>VAck!<CR>
vmap <Esc>F   mo:<C-U>VGGrep!<CR>
vmap <M-K>    mo:<C-U>VGGrep!<CR>

" Alt-W to delete a buffer and remove it from the list but keep the window via bufkill.vim
nmap <Esc>w :BD<CR>
nmap <M-w>  :BD<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Typing `$c` on the command line expands to the current path, so it's easy to edit a file in
" the same directory as the current file.
" Note: <C-\>e execute the function after it
cnoremap $c <C-\>eCurrentFileDir()<CR>

" in case you forgot to sudo, typing w!! in command mode will force the file to be written
" through sudo + tee
cnoremap w!! %!sudo tee > /dev/null %


" Functions
" ! to override
function! GetVisualSelection(delim)
    " Why is this not a built-in Vim script function?!
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, a:delim)
endfunction

function! VGGrepfunc(bang)
  let words = GetVisualSelection(" ")
  let words = substitute(words, '\([().[\]]\)', '\\\1',"g")
  if len(words) > 2
    call GGrep(a:bang, words)
  endif
endfunction

function! VAckfunc(cmd)
  let words = GetVisualSelection(" ")
  let words = substitute(words, '\([().[\]]\)', '\\\1',"g")
  if len(words) > 2
    call ack#Ack(a:cmd, '"'.words.'"')
  endif
endfunction

" "Safe" version of Ack! that don't run even if it's just a quote or a semicolon
function! Sackfunc(cmd, args)
  " we usually call this function with "\b<real_term>\b" so there is at least 6
  " chars no matter what let's trigger a search only if we have more than 3 letters
  if len(a:args) > 9
    call ack#Ack(a:cmd, a:args)
  endif
endfunction

function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  set bg=light
  hi SpellBad ctermfg=1 term=bold ctermbg=225 gui=undercurl guisp=Magenta

  if !has('gui_running')
    let g:solarized_termcolors=256
  endif
  "colors solarized
endfunction

function! FormatDiff()
    let l:lines = "all"
    if has('python')
      pyf ~/.vim/clang-format.py
    elseif has('python3')
      py3f ~/.vim/clang-format.py
    endif
endf

function! CommitMessages()
    nmap S iSigned-off-by: Matthieu Patou <mat@matws.net><CR><ESC>
    nmap R iReviewed-by: Matthieu Patou <mat@matws.net><CR><ESC>
    " abreviation that works in insert mode
    iab #S Signed-off-by: Matthieu Patou <mat@matws.net>
    iab #R Reviewed-by: Matthieu Patou <mat@matws.net>
    iab #O Signed-off-by:
    iab #V Reviewed-by:
    iab #P Pair-Programmed-With:
    iab `` ```<CR><CR>```
    " Go to the first line of the commit message
    exe ":1"
endf

function! EndsWith(longer, shorter) abort
    return a:longer[len(a:longer)-len(a:shorter):] ==# a:shorter
endfunction

function! CurrentFileDir()
  let cmd = getcmdline()
  if len(cmd) == 0
    let cmd = "e "
  endif
  if EndsWith(cmd, '(')
    let prefix = "'"
  else
    let prefix = ''
  endif
  let cmd = cmd .. prefix .. expand("%:p:h") .. "/"
  call setcmdpos(strlen(cmd) + 1)
  return cmd
endfunction

" Commands to send common keystrokes using tmux
" +1 aka next pane
let g:tmux_console_pane = '+1'
let g:tmux_server_pane = '+1'

function! TmuxPaneRepeat()
  write
  silent execute ':!tmux send-keys -t' g:tmux_console_pane 'Up' 'C-j'
  redraw!
endfunction

function! TmuxPaneClear()
  silent execute ':!tmux send-keys -t' g:tmux_server_pane 'C-j' 'C-j' 'C-j' 'C-j' 'C-j' 'C-j' 'C-j'
  redraw!
endfunction

" Make the cursor stay on the same line when window switching
function! KeepCurrentLine(motion)
  let theLine = line('.')
  let theCol = col('.')
  exec 'wincmd ' . a:motion
  if &diff
    call cursor(theLine, theCol)
  endif
endfunction

" expand %, # and < based special characters
" needed when you don't call some function like grep and what not that will do the translation
function! ExpandString(string)
  let str = a:string
  for c in ["%", "#", "<"]
    if c == "%"
      let str = substitute(str, "%", expand("%"), "g")
    endif
    if c == "#"
      let str = substitute(str, '\(#\d*\)', '\=expand(submatch(1))', "g")
    endif
    if c == "<"
      let str = substitute(str, '\(<.*>\)', '\=expand(submatch(1))', "g")
    endif
  endfor
  return str
endfunction

" Can't call directly GGrep with things like <cword> or \b<cword>\b as they are not extrapolated
" the goal of this function is extrapolate/expand them as it would happen with the vim grep command
function! GGrepwrapper(bang, args)
  if empty(a:args)
    let words = expand("<cword>")
  else
    let words_list = [ ExpandString(a:args) ]
    for w in a:000
      let words_list = add(words_list, ExpandString(w))
    endfor
    let words = join(words_list, ' ')
  endif
  " Note because we have both the function and the command, calling without the call will call the
  " command not the function and the parameters are not expanded but passed as is
  "Also not passing bang to GGrep because I don't want it full screen
  call GGrep("", words)
endfunction

function GGrep(bang, words)
  if a:bang == "!"
    let fullscreen = 1
  else
    let fullscreen = 0
  endif
  " Leverage fzf to do Git Grep
  " - The second argument to `fzf#vim#grep` is 0 (false), because `git grep` does
  " not print column numbers.
  " - We set the base directory to git root by setting `dir` attribute in spec
  " dictionary.

  " <bang> when calling function will translate to the ! char, so if included in a
  " string it will be concatenated, for instance foo<bang> will give foo!, if it's a integer
  " then it will negate it's value ie. <bang>0 becomes !0 or 1 if the command was called with bang
  " iterate on a:words and shellescape them
  let words_list = []
  for w in a:words
    if !(w =~ '^"' || w =~"^'" || w =~ '"$' || w =~ "'$")
      let w = shellescape(w)
    endif
    let words_list = add(words_list, w)
    let words = join(words_list, ' ')
  endfor

  call fzf#vim#grep('git grep --line-number -- '.words, 0,  fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), fullscreen)
endfunction

" Create a group for autocmd ?
"augroup config

" Resize panes when window/terminal gets resize
autocmd VimResized * :wincmd =

" Fix annoyances in the QuickFix window, like scrolling too much
autocmd FileType qf setlocal number nolist
autocmd Filetype qf wincmd J " Makes sure it's at the bottom of the vim window

" Some quick debugging
autocmd BufEnter *.py iabbr pou print('pouet 
autocmd BufEnter *.py iabbr tata print('tatayoyo 
autocmd BufEnter *.sh iabbr pou echo 'pouet 
autocmd BufEnter *.sh iabbr pou echo 'tatayoyo
autocmd FileType sh iabbr pou echo 'pouet
autocmd FileType sh iabbr tata echo 'tatayoyo 

" No more than 80c long red thing for pdf
if exists('+colorcolumn')
  autocmd BufReadPre *.pdf set colorcolumn=0
endif

" Allow pdf to be opened in Vim
autocmd BufReadPre *.pdf set ro nowrap
autocmd BufReadPre *.pdf set noruler
autocmd BufRead *.pdf silent %!pdftotext "%" -nopgbrk -layout -q -eol unix -
autocmd BufReadPost *.pdf exec "%s/[^[:alnum:][:punct:][:space:]]//g"

" By default vim keep a in the mark named " the last line where the cursor was
" when the file was last open.
" '" is how to get this address, of course we need to escape this when calling functions like line()
" or execute so "'\""
" Note ' or ` is the same, and using g' over just ' means that the jump list is not changed
" So with the autocmd if the mark " is set then go to this mark: g'" but
" but because this part of an exe we need to escape it
" It's basically to allow to go back to the last position in the file when
" the file has been read
autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
autocmd BufWinEnter COMMIT_EDITMSG,*.diff,*.patch,*.patches.txt call CommitMessages()

" Fallback to yaml if a sls file is not detected as python or sls
function!  FallbackSalt()
  let fts = ['sls', 'python']
  if index(fts, &filetype) == -1
    set ft=yaml
  endif
endfunction
au BufNewFile,BufRead *.sls,Saltfile call FallbackSalt()

" augroup END

" ----------------------------------------------------------------------------
" OPTIONS
" ----------------------------------------------------------------------------
"set number                 " TODO should I re-enable that
"set nowrap                 " TODO revisit if I want wraping or not
"set nocompatible           " no compatible mode maybe ...
"set smarttab               " insert tabs on the start of a line according to
                            " shifwidth, not tabstop
"set noswapfile
set autoindent              " Carry over indenting from previous line
"set autoread               " Don't bother me when a file changes
"set autowrite               " Write on :next/:prev/^Z
set backspace=indent,eol,start
                            " Allow backspace beyond insertion point
set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=                   " See :h cinoptions-values
set clipboard=unnamedplus
set commentstring=\ \ #%s   " When folds are created, add them to this
set copyindent              " Make autoindent use the same chars as prev line
set directory-=.            " Don't store temp files in cwd, ie. take what you have already in
                            " directory variable and remove '.' from it
set encoding=utf8           " UTF-8 by default
set expandtab               " No tabs
set fileformats=unix,dos,mac  " Prefer Unix
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
                            " Unicode chars for diffs/folds, and rely on
                            " Colors for window borders
silent! set foldmethod=marker " Use braces by default
set formatoptions=tcqn1     " t - autowrap normal text
                            " c - autowrap comments
                            " q - gq formats comments
                            " n - autowrap lists
                            " 1 - break _before_ single-letter words
                            " 2 - use indenting from 2nd line of para
set hidden                  " Don't prompt to save hidden windows until exit
set history=200             " How many lines of history to save
set hlsearch                " Hilight searching
set ignorecase              " Case insensitive
set incsearch               " Search as you type
set infercase               " Completion recognizes capitalization
set laststatus=2            " Always show the status bar
set linebreak               " Break long lines by word, not char
set list                    " Show whitespace as special chars - see listchars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " Unicode characters for various things
set matchtime=2             " Tenths of second to hilight matching paren
set nomodeline              " teh hackerz!!!1
silent! set mouse=a         " Use the mouse
set nobackup                " No backups left after done editing
set visualbell t_vb=        " No flashing or beeping at all
set nowritebackup           " No backups made while editing
set printoptions=paper:letter " US paper
set ruler                   " Show row/col and percentage
set scroll=4                " Number of lines to scroll with ^U/^D
set scrolloff=15            " Keep cursor away from this many chars top/bot
set sessionoptions-=options " Don't save runtimepath in Vim session (see tpope/vim-pathogen docs)
set shiftround              " Shift to certain columns, not just n spaces
set shiftwidth=2            " Number of spaces to shift for autoindent or >,<
set shortmess+=A            " Don't bother me when a swapfile exists
set showbreak=              " Show for lines that have been wrapped, like Emacs
set showmatch               " Hilight matching braces/parens/etc.
set sidescrolloff=3         " Keep cursor away from this many chars left/right
set smartcase               " Lets you search for ALL CAPS
set softtabstop=2           " Spaces 'feel' like tabs
set suffixes+=.pyc          " Ignore these files when tab-completing
set tabstop=2               " The One True Tab
set textwidth=100           " 100 is the new 80
set thesaurus+=~/.vim/mthes10/mthesaur.txt
set wildmenu                " Show possible completions on command line
set wildmode=list:longest,full " List all options and complete
set wildignore=*.class,*.o,*~,*.pyc,*.class,*.swp,*.bak,.git,node_modules  " Ignore certain files in tab-completion

set pastetoggle=<F2>        " Allow to switch in paste mode
set undolevels=1000         " use many muchos levels of undo
set title                   " change the terminal's title
set tags=./tags,./TAGS,tags,TAGS
"There is no point of doing noswapfile with shortmess+=A because if there is a swapfile (ie.
".foo.swp) vim will ignore it and right away create .foo.swo. So it's kind of the same but in case
"there is still a swapfile if really needed
"set noswapfile             " No swapfile by default, make it easier to reopen a file
"Something to note: polyglote plugin is changing directory to contain $HOME/.vim// and shortmess to
"have also +A

" For the moment it's never
if version >= 700
    set statusline=
    set statusline+=%<                 " set truncation point everything else is shown even if we
                                       " don't have enough space
    set statusline+=%f%m%r             " full path + modification marker (%m) + mode (%r)
    set statusline+=%11(buffer:%.4n%)  " buffer number, make everything fit in 11 chars
                                       " start abreviating buffers that have
                                       " more than 4 digits (>1000)
    set statusline+=\ %#warningmsg#    " Set highlight group %#...# called warninmsg
    " As of 2023 don't use Syntastic anymore but ALE so there is no point to use it
    "set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*\                " %* bringrs the highlighting to what was before

    set statusline+=%15(L%l,C%c%V%)\  " %15( is the width specification, ends with %)
                                      " Line and Column and Virtual column
    set statusline+=%3P               " Add position in the buffer (top, All or pct)

endif

" Things like vim-polyglot are messing up with this when they are forcing the colors
" to be 16 if you had 8, so let's go ahead and force it before vim-polyglot is doing it.
" It will avoid having the ctermbg being changed, also let's go big and set it to 256 colors
set t_Co=256
set background=dark

" Note color changes need to be after the forcing of t_CO
" default color scheme is not so great

" Decent colorscheme that works well both in black on white and white on black terminals
" colors darkblue
" hi Normal ctermfg=grey ctermbg=black

" colors torte
" colors koehler
colors slate

" Make status line clearer when vsplit is used
hi StatusLine  ctermbg=5 cterm=bold

" The yellowish stuff is not great
hi Comment ctermfg=LightGreen

" Dark blue better that light blue ?
hi Search ctermbg=darkblue

" LSC is aliasing lscDiagnosticWarning to SpellBad by default it's a red background that make
" things very hard to read
hi SpellBad ctermbg=30 term=bold
" Might have to do it for lscDiagnosticError too
" Should I change the inc search ?
"hi IncSearch ctermbg=red


" ----------------------------------------------------------------------------
" CUSTOM COMMANDS
" ----------------------------------------------------------------------------
" NB: command! force the command to be redefined if it exist
" I always hit ":W" instead of ":w" because I linger on the shift key...
command! Q q
command! W w

" Close all buffers except this one
command! BufCloseOthers %bd|e#

command! ProseMode call ProseMode()

command! -bang -nargs=* GGrep    call GGrep('<bang>', [<f-args>])
command! -bang -nargs=* GGrepw   call GGrepwrapper('<bang>', <q-args>)
command! -bang VGGrep            call VGGrepfunc('<bang>')
" argument to VAckfunc will be grep or grep! depending how Vack is called
command! -bang VAck              call VAckfunc('grep<bang>')
command! -bang -nargs=* -complete=file Sack           call Sackfunc('grep<bang>', <q-args>)

" Which folder to look for lintrc folders
let s:lintrcfolders = [ ".", expand("~")]

let s:gittop = systemlist('git rev-parse --show-toplevel')
" Are we in a git repo ?
if len(s:gittop) > 0
  if s:gittop[0][0] == "/"
    " Does it start with a "/" ? if so also look there for lintrc files
    call extend(s:lintrcfolders, [s:gittop[0]], 0)
  endif
endif

" call globpath to get all the paths listed in s:lintrcfolders, ignore well known suffixes
" like .bak or ~ (3rd option) and return a list (4th parameter)
let s:lintrcpath = globpath(join(s:lintrcfolders, ","), ".pylintrc", 0, 1)
if len(s:lintrcpath) > 0
  " If any match take the first one
  let g:ale_python_pylint_options = "--rcfile=". s:lintrcpath[0]
endif

let s:lintrcpath = globpath(join(s:lintrcfolders, ","), "tox.ini", 0, 1)
if len(s:lintrcpath) == 0
  let s:lintrcpath = globpath(join(s:lintrcfolders, ","), ".tox.ini", 0, 1)
endif
if len(s:lintrcpath) > 0
  let g:ale_python_flake8_options = "--config ". s:lintrcpath[0]
endif


" Some plugin seems to search for something at startup, so this fixes that.
silent! nohlsearch
" Note this is not quite doing what I would like, it's not notifying me if there is already
" a swapfile because the shortmess being set by polyglot..
autocmd BufEnter *.md setlocal textwidth=0 | set swapfile | set shortmess-=A
" cc (ie. gcc/clang) seems to get it pretty wrong with c++ headers so let's get rid of it
let g:ale_linters_ignore = {
      \'cpp': ['cc'],
      \'c': ['cc'],
      \}
let g:ale_fix_on_save = 1
" It seems that of September 2023 ALE is interfering with deoplete so let's disable it for the
" moment
"let g:ale_completion_enabled = 1
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_start_length = 3
let g:deoplete#enable_auto_select = 1
" Different options for insert mode completion
" menu: use a popup for completion
" noinsert: Do not insert any text for a match until the user selects
"           a match from the menu. Only works in combination with
"           "menu" or "menuone". No effect if "longest" is present.
"
" No matter what the documentation says the effect of noinsert is to highlight what deoplete put
" first so that pressing return would just complete
set completeopt=menu,noinsert

let s:pylsp_options = {
  \   'pylsp': {
  \     'plugins': {
  \       'autopep8': {
  \         'enabled': v:false
  \       },
  \       'rope_rename': {
  \         'enabled': v:false
  \       },
  \       'rope_completion': {
  \         'enabled': v:false
  \       },
  \       'pycodestyle': {
  \         'enabled': v:false
  \       },
  \       'pyflakes': {
  \         'enabled': v:false
  \       }
  \     }
  \   },
  \}

" Get details on the variable/function under the cursor
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" Go to definition
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" Rename
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Allow to debug LanguageClient
"let g:LanguageClient_loggingLevel = 'INFO'
"let g:LanguageClient_useVirtualText = 'CodeLens'
"let g:LanguageClient_loggingFile = expand('~/LanguageClient.log')
"let g:LanguageClient_serverStderr = expand('~/LanguageServer.log')
"let g:LanguageClient_serverCommands = {
"  \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
"  \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
"  \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
"  \ 'python': {
"  \   'name': 'pylsp',
"  \   'command': ['/usr/bin/pylsp'],
"  \   'commanddebug': ['pylsp', '-v', '--log-file', '/tmp/'..$USER..'-lc_pylsp.log'],
"  \   'initializationOptions': s:pylsp_options,
"  \ },
"  \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
"  \ 'cpp': ['/usr/bin/ccls'],
"  \ 'c': ['/usr/bin/ccls'],
"  \ 'go': ['gopls'],
"  \ }
"let g:LanguageClient_settingsPath = '~/.vim/settings.json'
" LSC settings
let g:lsc_server_commands = {
 \  'sls': {
 \    'command': '/home/mat/bin/salt_lsp',
 \    'capabilities': ['completion'],
 \  },
 \  'typescript': {
 \    'command': 'typescript-language-server --stdio',
 \    'log_level': 2,
 \    'suppress_stderr': v:true,
 \  },
 \  'typescriptreact': {
 \    'command': 'typescript-language-server --stdio',
 \    'log_level': 2,
 \    'suppress_stderr': v:true,
 \  },
 \  'javascript': {
 \    'command': 'typescript-language-server --stdio',
 \    'log_level': 2,
 \    'suppress_stderr': v:true,
 \  },
 \  'python': {
 \    'name': 'pylsp',
 \    'command': ['pylsp', '--log-file', '/dev/null'],
 \    'debugcommand': ['pylsp', '-v', '--log-file', '/tmp/'..$USER..'-lc_pylsp.log'],
 \    'message_hooks': {
 \      'initialize': {
 \        'initializationOptions': s:pylsp_options,
 \      },
 \    },
 \  },
 \ 'cpp': {
 \   'command': '/usr/bin/ccls',
 \ },
 \ 'c': {
 \   'command': '/usr/bin/ccls',
 \ },
 \ 'go': {
 \   'command': ['gopls','-remote=auto'],
 \    "log_level": -1,
 \    "suppress_stderr": v:true,
 \ },
 \}

let g:lsc_auto_map = {
 \  'GoToDefinition': 'gd',
 \  'FindReferences': 'gr',
 \  'Rename': 'gR',
 \  'ShowHover': 'K',
 \  'FindCodeActions': 'ga',
 \  'Completion': 'omnifunc',
 \}
let g:lsc_enable_autocomplete  = v:true
let g:lsc_enable_diagnostics   = v:false
let g:lsc_reference_highlights = v:false
let g:lsc_trace_level          = 'off'
let g:lsc_default_map = v:true

" Add fixer for python on python filetypes
let g:ale_fixers = {
  \   'python':       ['black', 'isort', 'autoflake'],
  \   'go':           ['goimports','gofmt'],
  \   'bzl':          ['buildifier'],
  \   'terraform':    ['terraform'],
  \   'javascript':    ['prettier'],
  \   'typescript':    ['prettier'],
  \}

let g:ale_linters = {
  \ 'go':      [ 'gopls', 'govet'],
  \ 'python' : ['flake8', 'pylsp'],
  \ 'javascript' : ['cspell', 'eslint', 'flow',  'tsserver']
  \}


" Enable the use of dispatch to do search
let g:ack_use_dispatch = 1
let g:ale_python_pylsp_executable = 'pylsp'
let g:ale_python_pylsp_config = s:pylsp_options

" To quiet the errors about missing modules
let g:ale_python_pylsp_options = '--log-file /tmp/null'
let g:ale_go_gopls_options = '-remote=auto'
" To debug
" let g:ale_python_pylsp_options = '-v --log-file /tmp/'..$USER..'-ale_pylsp.log'
" Maybe this one
highlight Pmenu ctermbg=darkblue guibg=darkblue
" graybg is hard to read when doing hover
"highlight Pmenu ctermbg=gray guibg=gray
highlight PmenuSel ctermbg=Magenta guibg=Magenta ctermfg=black guibg=black

" Pmenu – normal item
" PmenuSel – selected item
" PmenuSbar – scrollbar
" PmenuThumb – thumb of the scrollbar


function! DisableMypyLinter()
  if isdictionary(b:ale_linters)
    let i = index(b:ale_linters, 'mypy') == -1
    if i != -1
      call remove(b:ale_linters, i)
    endif
  endif
endfunction

function! EnableMypyLinter()
  if !isdictionary(b:ale_linters)
    let b:ale_linters = {
    \  'python' : g:ale_linters['python']
    \  }
  endif
  if index(b:ale_linters, 'mypy') == -1
    call add(b:ale_linters['python'], 'mypy')
  endif
endfunction
" This needs to be at the and obviously
" Now load specifics to this host
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" Specify the path to `coverage.json` file relative to your current working directory.
 let g:coverage_json_report_path = 'coverage/coverage-final.json'

" Define the symbol display for covered lines
let g:coverage_sign_covered = '⦿'
" Define the interval time of updating the coverage lines
let g:coverage_interval = 5000

" Do not display signs on covered lines
let g:coverage_show_covered = 0

" Display signs on uncovered lines
let g:coverage_show_uncovered = 1
