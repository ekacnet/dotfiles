" leader is a comma now
let mapleader = ','
let g:ackprg = "ag"

" Use pathogen to easily modify the runtime path to include all
" " plugins under the ~/.vim/bundle directory
if version >= 700
  filetype off
  call pathogen#infect()
  filetype plugin indent on
endif

syntax on

" n = normal (ie. not in command, visual, select)
" i = insert mode
" c = command mode
" v = visual mode

" TODO fix: change color at the bottom to more clearly show in which window I am

" TODO figure out what I want from this
" NERDTreeFind, Goyo, ALE
" Useful macros I use the most
nmap \A :set formatoptions+=a<CR>:echo "autowrap enabled"<CR>
nmap \a :set formatoptions-=a<CR>:echo "autowrap disabled"<CR>
nmap \F :NERDTreeFind<CR>
" Tab indent mode 8 chars
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
" Indent mode 8 chars
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \W mt:Goyo<CR>'tzz
" No C indentation mode and 80 cols and autowrap
nmap \b :set nocin tw=80<CR>:set formatoptions+=a<CR>
nmap \c :call TmuxPaneClear()<CR>
nmap \d :ALEToggleBuffer<CR>
nmap \e :NERDTreeToggle<CR>
nmap \f :ALEFix<CR>
" Switch gitgutter on/off
nmap \g :GitGutterToggle<CR>
nmap \i vip:sort<CR>
" Invert number
nmap \l :setlocal number!<CR>:setlocal number?<CR>
" Small indentation mode
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
" Invert paste mode !
nmap \o :set paste!<CR>:set paste?<CR>
nmap \p :ProseMode<CR>
" allow to unhilight search
nmap \q :nohlsearch<CR>
" repeat the last command in the other tmux pane
nmap \r :call TmuxPaneRepeat()<CR>
" Enable spellchecker in the current buffer
nmap \s :setlocal invspell<CR>
" set to expandtab, ts=4,sw=4,sts=4
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
"Invert the list mode in the current buffer and display the status in the command line
nmap \u :setlocal list!<CR>:setlocal list?<CR>
" Invert the wrap mode and display the status in the command line
nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>
" Close quickfix window
nmap \x :cclose<CR>
" Useful on mac, save the file and call open on the filename of the current buffer (%)
nmap \z :w<CR>:!open %<CR><CR>
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>
map <C-f> :py3f ~/.vim/clang-format.py<cr>
imap <C-f> <c-o>:py3f ~/.vim/clang-format.py<cr>


nmap <F8> :TagbarToggle<CR>
"Map F5 but with no recursion
nnoremap <F5> :GundoToggle<CR>

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with
" line wrapping on, this can cause the cursor to actually skip a few lines on the screen because
" it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down'
" to mean the next line on the screen
nmap j gj
nmap k gk

" Marks should go to the column, not just the line. Why isn't this the default?
nnoremap ' `

" Use ctrl + e to switch buffer
nmap <C-e> :e#<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Use the space key to toggle folds
nnoremap <space> za
vnoremap <space> zf

" Super fast window movement shortcuts
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" keep current line/col when switching left to right and vice versa
nnoremap <C-w>h :silent call KeepCurrentLine('h')<CR>
nnoremap <C-w>l :silent call KeepCurrentLine('l')<CR>

" Search for the word under the cursor in the current directory
nmap <M-S-k>  mo:Ggrep! "\b<cword>\b" <CR>
nmap <Esc>K   mo:Ggrep! "\b<cword>\b" <CR>
nmap <M-k>    mo:Ack! "\b<cword>\b" <CR>
nmap <Esc>k   mo:Ack! "\b<cword>\b" <CR>

" Alt-W to delete a buffer and remove it from the list but keep the window via bufkill.vim
nmap <Esc>w :BD<CR>
nmap <M-w>  :BD<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Typing `$c` on the command line expands to `:e` + the current path, so it's easy to edit a file in
" the same directory as the current file.
cnoremap $c e <C-\>eCurrentFileDir()<CR>

" in case you forgot to sudo, typing w!! in command mode will force the file to be written
" through sudo + tee
cnoremap w!! %!sudo tee > /dev/null %

" Functions
" ! to override
function! FormatDiff()
    let l:lines = "all"
    if has('python')
      pyf ~/.vim/clang-format.py
    elseif has('python3')
      py3f ~/.vim/clang-format.py
    endif
endf

function! CommitMessages()
    nmap S iSigned-off-by: Matthieu Patou <mat@matws.net><CR><ESC>
    nmap R iReviewed-by: Matthieu Patou <mat@matws.net><CR><ESC>
    " abreviation that works in insert mode
    iab #S Signed-off-by: Matthieu Patou <mat@matws.net>
    iab #R Reviewed-by: Matthieu Patou <mat@matws.net>
    iab #O Signed-off-by:
    iab #V Reviewed-by:
    iab #P Pair-Programmed-With:
    " Go to the first line of the commit message
    exe ":1"
endf

function! CurrentFileDir()
   return "e " . expand("%:p:h") . "/"
endfunction

map <C-c> :call FormatDiff()<CR>
" Commands to send common keystrokes using tmux
let g:tmux_console_pane = '0:0.0'
let g:tmux_server_pane = '0:0.0'

function! TmuxPaneRepeat()
  write
  silent execute ':!tmux send-keys -t' g:tmux_console_pane 'C-p' 'C-j'
  redraw!
endfunction

function! TmuxPaneClear()
  silent execute ':!tmux send-keys -t' g:tmux_server_pane 'C-j' 'C-j' 'C-j' 'C-j' 'C-j' 'C-j' 'C-j'
  redraw!
endfunction

" Make the cursor stay on the same line when window switching
function! KeepCurrentLine(motion)
  let theLine = line('.')
  let theCol = col('.')
  exec 'wincmd ' . a:motion
  if &diff
    call cursor(theLine, theCol)
  endif
endfunction

" Create a group for autocmd ?
"augroup config

" Resize panes when window/terminal gets resize
autocmd VimResized * :wincmd =

" Fix annoyances in the QuickFix window, like scrolling too much
autocmd FileType qf setlocal number nolist
autocmd Filetype qf wincmd J " Makes sure it's at the bottom of the vim window

" Some quick debugging
autocmd BufEnter *.py iabbr pou print('pouet 
autocmd BufEnter *.py iabbr tata print('tatayoyo 
autocmd BufEnter *.sh iabbr pou echo 'pouet 
autocmd BufEnter *.sh iabbr pou echo 'tatayoyo
autocmd FileType sh iabbr pou echo 'pouet
autocmd FileType sh iabbr tata echo 'tatayoyo 

" No more than 80c long red thing for pdf
if exists('+colorcolumn')
  autocmd BufReadPre *.pdf set colorcolumn=0
endif

" Allow pdf to be opened in Vim
autocmd BufReadPre *.pdf set ro nowrap
autocmd BufReadPre *.pdf set noruler
autocmd BufRead *.pdf silent %!pdftotext "%" -nopgbrk -layout -q -eol unix -
autocmd BufReadPost *.pdf exec "%s/[^[:alnum:][:punct:][:space:]]//g"

" By default vim keep a in the mark named " the last line where the cursor was
" when the file was last open.
" '" is how to get this address, of course we need to escape this when calling functions like line()
" or execute so "'\""
" Note ' or ` is the same, and using g' over just ' means that the jump list is not changed
" So with the autocmd if the mark " is set then go to this mark: g'" but 
" but because this part of an exe we need to escape it
" It's basically to allow to go back to the last position in the file when
" the file has been read
autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
autocmd BufWinEnter COMMIT_EDITMSG,*.diff,*.patch,*.patches.txt call CommitMessages()

" augroup END

" ----------------------------------------------------------------------------
" OPTIONS
" ----------------------------------------------------------------------------
"set number                 " TODO should I re-enable that
"set nowrap                 " TODO revisit if I want wraping or not
"set nocompatible           " no compatible mode maybe ...
"set smarttab               " insert tabs on the start of a line according to
                            " shifwidth, not tabstop
"set noswapfile
set autoindent              " Carry over indenting from previous line
"set autoread               " Don't bother me when a file changes
"set autowrite               " Write on :next/:prev/^Z
set backspace=indent,eol,start
                            " Allow backspace beyond insertion point
set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=                   " See :h cinoptions-values
set clipboard=unnamedplus
set commentstring=\ \ #%s   " When folds are created, add them to this
set copyindent              " Make autoindent use the same chars as prev line
set directory-=.            " Don't store temp files in cwd, ie. take what you have already in
                            " directory variable and remove '.' from it
set encoding=utf8           " UTF-8 by default
set expandtab               " No tabs
set fileformats=unix,dos,mac  " Prefer Unix
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
                            " Unicode chars for diffs/folds, and rely on
                            " Colors for window borders
silent! set foldmethod=marker " Use braces by default
set formatoptions=tcqn1     " t - autowrap normal text
                            " c - autowrap comments
                            " q - gq formats comments
                            " n - autowrap lists
                            " 1 - break _before_ single-letter words
                            " 2 - use indenting from 2nd line of para
set hidden                  " Don't prompt to save hidden windows until exit
set history=200             " How many lines of history to save
set hlsearch                " Hilight searching
set ignorecase              " Case insensitive
set incsearch               " Search as you type
set infercase               " Completion recognizes capitalization
set laststatus=2            " Always show the status bar
set linebreak               " Break long lines by word, not char
set list                    " Show whitespace as special chars - see listchars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " Unicode characters for various things
set matchtime=2             " Tenths of second to hilight matching paren
set nomodeline              " teh hackerz!!!1
silent! set mouse=a         " Use the mouse
set nobackup                " No backups left after done editing
set visualbell t_vb=        " No flashing or beeping at all
set nowritebackup           " No backups made while editing
set printoptions=paper:letter " US paper
set ruler                   " Show row/col and percentage
set scroll=4                " Number of lines to scroll with ^U/^D
set scrolloff=15            " Keep cursor away from this many chars top/bot
set sessionoptions-=options " Don't save runtimepath in Vim session (see tpope/vim-pathogen docs)
set shiftround              " Shift to certain columns, not just n spaces
set shiftwidth=2            " Number of spaces to shift for autoindent or >,<
set shortmess+=A            " Don't bother me when a swapfile exists
set showbreak=              " Show for lines that have been wrapped, like Emacs
set showmatch               " Hilight matching braces/parens/etc.
set sidescrolloff=3         " Keep cursor away from this many chars left/right
set smartcase               " Lets you search for ALL CAPS
set softtabstop=2           " Spaces 'feel' like tabs
set suffixes+=.pyc          " Ignore these files when tab-completing
set tabstop=2               " The One True Tab
set textwidth=100           " 100 is the new 80
set thesaurus+=~/.vim/mthes10/mthesaur.txt
set wildmenu                " Show possible completions on command line
set wildmode=list:longest,full " List all options and complete
set wildignore=*.class,*.o,*~,*.pyc,*.class,*.swp,*.bak,.git,node_modules  " Ignore certain files in tab-completion

set pastetoggle=<F2>        " Allow to switch in paste mode
set undolevels=1000         " use many muchos levels of undo
set title                   " change the terminal's title
set tags=./tags,./TAGS,tags,TAGS
"There is no point of doing noswapfile with shortmess+=A because if there is a swapfile (ie.
".foo.swp) vim will ignore it and right away create .foo.swo. So it's kind of the same but in case
"there is still a swapfile if really needed
"set noswapfile             " No swapfile by default, make it easier to reopen a file
"Something to note: polyglote plugin is changing directory to contain $HOME/.vim// and shortmess to
"have also +A

"TODO customize status line
" For the moment it's never
if version >=12700
    set statusline=
    set statusline+=%< " set truncation point everything else is shown even if we
                       " don't have enough space
    set statusline+=%f%m%r "full path + modification marker (%m) + mode (%r)
    set statusline+=%11(buffer:%.3n%)  "buffer number, make everything fit in 11 chars
                                       "start abreviating buffers that have
                                       "more than 3 digit (>100)
    set statusline+=\ %#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*\

    set statusline+=%15(L%l,C%c%V%)\  " %15( is the width specification, ends with %)
                                      " Line and Column and Virtual column
    set statusline+=%3P               " Add position in the buffer (top, All, ...)

    " Make status line clearer when vsplit is used
    hi StatusLine  ctermbg=5 cterm=bold
endif

if version >=700
    " Make status line clearer when vsplit is used
    hi StatusLine  ctermbg=5 cterm=bold
endif



" ----------------------------------------------------------------------------
" CUSTOM COMMANDS
" ----------------------------------------------------------------------------

" I always hit ":W" instead of ":w" because I linger on the shift key...
command! Q q
command! W w

" Close all buffers except this one
command! BufCloseOthers %bd|e#

" Now load specifics to this host
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
 
" Some plugin seems to search for something at startup, so this fixes that.
silent! nohlsearch
" Note this is not quite doing what I would like, it's not notifying me if there is already
" a swapfile because the shortmess being set by polyglot..
autocmd BufEnter *.md setlocal textwidth=0 | set swapfile | set shortmess-=A
